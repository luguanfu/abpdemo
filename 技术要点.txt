=======代码技术部分========
1.EF对自定义字符串字段排序
	Extention.Order.OrderBy
2.EF对自定义条件筛选
	Extention.Search.WhereFilter
3.EF对返回结果指定字段数据汇总
	Extention.Summary.Summary
	汇总类型转换：https://blog.csdn.net/xiaohan2826/article/details/8536074
4.表关联查询
	Extention.Select.BuildExtendSelectExpre
5.实体映射
	Extention.Map.Map/MapList
6.层表设计
	DetailTableInfo
	不在模型中定义层表结构也能获取到参数：
		1,扩展方法：HttpRequest.GetFormData
		2,Startup配置:
		services.Configure<KestrelServerOptions>(options =>
        {
            options.AllowSynchronousIO = true;
        });
		app.Use(next => new RequestDelegate(
            async context =>
            {
                context.Request.EnableBuffering();
                await next(context);
            }
        ));
7.操作日志设计(即对所有数据表进行新曾、删除、修改后存留的记录数据)
8.返回指定字段
	dynamic obj = new System.Dynamic.ExpandoObject();
	((IDictionary<string, object>)obj).Add(propertyInfo.Name.FirstToLower(), propertyInfo.GetValue(item));
9.了解和使用反射
10.委托与事件(常常用于事件监听)--TodoApp.Common.DelegateManager
11.从token从获取用户信息(ControllerBase.User)
12..net core webapi项目发布IIS--在web.config中加入以下配置信息
	<aspNetCore>
		<environmentVariables>
			<environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Development" />
		</environmentVariables>
	</aspNetCore>

	.net core 部署到IIS 以及上 HTTP Error 502.5 - ANCM Out-Of-Process Startup Failure
	1.net stop was /y
	2.net start w3svc
	https://www.cnblogs.com/owenzh/p/11062932.html
13.调用外部api
14.数据导入(menucontroller.import)
15.自动生成层级(Level)&排序(OrderIndex)--区别单个对象添加和批量添加
16..net core webapi项目中嵌入web项目，需添加web服务--》endpoints.MapRazorPages();services.AddRazorPages();



=======需要掌握的技术要点========
1.消息队列
2.http协议、TCP/IP协议
3.数据结构算法
4..Net Core中间件&依赖注入
5.微服务架构


=======问题点=======
1.apibase基类多继承问题(?)
2.DataSourceLoader.Load(list, options),查询报错



======任务调度器========

======日志服务=======
注入logger：在StartUp.Configure中注入ILoggerFactory，并调用 loggerFactory.AddNLog();
配置日志文件：nlog.config
在需要记录日志的地方注入日志服务(ILogger<TModel>)并在需要记录日志的地方调用记录日志方法


==========Token及身份认证==========
1,Startup中配置身份认证

==========登录缓存(Redis)==========
前提：引入，ServiceStack.Redis，建立Cache公共类
1,登录，返回token，并将token写入header中
2,登录之后，将User信息保存到Redis缓存中
3,查询数据时，校验是否将数据写入缓存(默认不写入)，在控制中将IsWriteCache=true，则会写入缓存，缓存Key为"视图模对象名称+Cache"
4,取数据时，先校验是否有缓存，若有则从缓存中取数据

============动态表单设计==========
TodoApp.WebFramework.FormsController



==========动态参数设置设计=========


========单点登录SSO=========
1,登录一次，可以访问所有相互信任的应用系统
		参考：https://blog.csdn.net/zhulongxi/article/details/52637982
		<machineKey validationKey="E4451576F51E0562D91A1748DF7AB3027FEF3C2CCAC46D756C833E1AF20C7BAEFFACF97C7081ADA4648918E0B56BF27D1699A6EB2D9B6967A562CAD14767F163" decryptionKey="6159C46C9E288028ED26F5A65CED7317A83CB3485DE8C592" validation="HMACSHA256" decryption="AES" />
		<authentication mode="Forms">
			<forms loginUrl="/Login/Login" name="Login"></forms>
		</authentication>
2,当在另一个ip登录时，强制退出当前登录(参考WebFramework-LoginController)
实现步骤：1、登录时记录登录的用户ID+SessionID，可利用Application、Cache、数据库等。
　　　　　2、写一个过滤器用于判断当前的用户ID和SessionID跟服务器记录的是否匹配以及不匹配时进行的操作。
　　　　  3、在Session过期或者退出系统时释放资源。


======如何处理并发修改同一条数据，乐观锁，悲观锁的实现及应用场景=======
悲观锁：查询加锁 【select ...... for update】
乐观锁：修改加锁 【版本号控制】
排它锁：事务A可以查询、修改，直到事务A释放为止才可以执行下一个事务
共享锁：事务A可以查询、修改，同时事务B也可以查询但不能修改
互斥锁：同一资源同一时间只能被一个线程访问

悲观锁：
START TRANSACTION;
SELECT * FROM USER WHERE id = 1 FOR UPDATE ;
乐观锁：
在表中新增一列(version) 该列不参与业务逻辑，仅记录数据版本,每次修改数据时进行版本比对，相同则提交，反之事务回滚
模型字段
public byte[] RowVersion { get; set; }
//数据迁移设置
b.Property(s => s.RowVersion).IsRowVersion();
//业务处理
try
{
    DbSet.Update(entity);
    context.Entry(entity).State = EntityState.Modified;
    return context.SaveChanges() > 0;
}
catch (DbUpdateConcurrencyException e)
{
    foreach (var item in e.Entries)
    {
        item.Reload();
        return context.SaveChanges() > 0;
    }
}

高并发对同一字段值进行修改
思路1：使用队列




==============数据库读写分离设计================
https://www.cnblogs.com/netlock/p/14098844.html




===================负载均衡==================


=============Docker容器化技术以及微服务架构=============
https://blog.csdn.net/wf19930209/article/details/80534499
https://blog.csdn.net/lijingyao8206/article/details/50284357
K8s：https://www.kubernetes.org.cn/k8s

================领域驱动设计(DDD)===========
https://www.likecs.com/default/index/show?id=93970


